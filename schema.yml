openapi: 3.0.3
info:
  title: Django DRF Ecommerce
  version: 1.0.0
  description: ALX ProDev Project Nexus - An Django DRF Ecommerce API
paths:
  /api/add_item/:
    post:
      operationId: api_add_item_create
      summary: Add item to cart
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
            examples:
              AddToCartExample:
                value:
                  cart_code: abc123
                  product_id: 1
                summary: Add to cart example
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartItem'
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                AddToCartExample:
                  value:
                    cart_code: abc123
                    product_id: 1
                  summary: Add to cart example
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/delete_cartitem/:
    delete:
      operationId: api_delete_cartitem_destroy
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/get_cart:
    get:
      operationId: api_get_cart_retrieve
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/get_cart_stat:
    get:
      operationId: api_get_cart_stat_retrieve
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/get_useremail:
    get:
      operationId: api_get_useremail_retrieve
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/initiate_payment/:
    post:
      operationId: api_initiate_payment_create
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/logout/blacklist/:
    post:
      operationId: api_logout_blacklist_create
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/payment_callback:
    post:
      operationId: api_payment_callback_create
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/product_detail/{slug}/:
    get:
      operationId: api_product_detail_retrieve
      summary: Retrieve detailed product information
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      - in: query
        name: slug
        schema:
          type: string
        description: Product slug
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedProduct'
          description: ''
  /api/product_in_cart:
    get:
      operationId: api_product_in_cart_retrieve
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/products/:
    get:
      operationId: api_products_list
      summary: List all products
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
          description: ''
  /api/register/:
    post:
      operationId: api_register_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/token/:
    post:
      operationId: api_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: api_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/update_quantity/:
    patch:
      operationId: api_update_quantity_partial_update
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/user_info:
    get:
      operationId: api_user_info_retrieve
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
components:
  schemas:
    BlankEnum:
      enum:
      - ''
    CartItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        product:
          allOf:
          - $ref: '#/components/schemas/Product'
          readOnly: true
        total:
          type: string
          readOnly: true
      required:
      - id
      - product
      - total
    CategoryEnum:
      enum:
      - electronics
      - fashion
      - beauty
      - groceries
      type: string
      description: |-
        * `electronics` - Electronics
        * `fashion` - Fashion
        * `beauty` - Beauty
        * `groceries` - Groceries
    DetailedProduct:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        slug:
          type: string
          nullable: true
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        image:
          type: string
          format: uri
        description:
          type: string
          nullable: true
        similar_products:
          type: string
          readOnly: true
      required:
      - id
      - image
      - name
      - price
      - similar_products
    NullEnum:
      enum:
      - null
    Product:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        slug:
          type: string
          nullable: true
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        image:
          type: string
          format: uri
        description:
          type: string
          nullable: true
        category:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/CategoryEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
      required:
      - id
      - image
      - name
      - price
    RoleEnum:
      enum:
      - customer
      - vendor
      - admin
      type: string
      description: |-
        * `customer` - Customer
        * `vendor` - Vendor
        * `admin` - Admin
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        password:
          type: string
          writeOnly: true
          maxLength: 128
        email:
          type: string
          format: email
          maxLength: 255
        role:
          $ref: '#/components/schemas/RoleEnum'
        items:
          type: string
          readOnly: true
      required:
      - email
      - id
      - items
      - password
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
